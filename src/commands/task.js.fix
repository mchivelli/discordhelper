const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const db = require('../utils/db');
const { getPrereqs, getSuggestions, generateTaskStages, enhanceTaskDescription, enhanceTaskNote } = require('../utils/ai');
const { stageActionRow } = require('../components/buttons');
const { stageSuggestionsActionRow, advanceStageActionRow, createCompletionNotesModal } = require('../components/task-components');
const logger = require('../utils/logger');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('task')
    .setDescription('Manage project tasks and stages')
    .addSubcommand(sub => 
      sub.setName('create')
      .setDescription('Create a new task with a unique ID')
      .addStringOption(o => 
        o.setName('id')
        .setDescription('Optional custom ID for the task')
        .setRequired(false))
      .addStringOption(o => 
        o.setName('name')
        .setDescription('Name of the task (e.g., "Website Redesign")')
        .setRequired(true))
      .addStringOption(o => 
        o.setName('contents')
        .setDescription('Detailed description of what the task involves')
        .setRequired(false))
      .addStringOption(o => 
        o.setName('deadline')
        .setDescription('Deadline date (format: YYYY-MM-DD or DD.MM.YYYY)')
        .setRequired(false))
      .addBooleanOption(o => 
        o.setName('aihelp')
        .setDescription('Use AI to suggest stages for this task')
        .setRequired(false)))
    .addSubcommand(sub => 
      sub.setName('add-stage')
      .setDescription('Add a new stage to an existing task')
      .addStringOption(o => 
        o.setName('id')
        .setDescription('Task ID (e.g., "t12345")')
        .setRequired(true)
        .setAutocomplete(true))
      .addStringOption(o => 
        o.setName('name')
        .setDescription('Stage name (e.g., "Design", "Development")')
        .setRequired(true))
      .addStringOption(o => 
        o.setName('desc')
        .setDescription('Detailed description of this stage')
        .setRequired(true)))
    .addSubcommand(sub => 
      sub.setName('list')
      .setDescription('List all stages for a task')
      .addStringOption(o => 
        o.setName('id')
        .setDescription('Task ID (e.g., "t12345")')
        .setRequired(true)
        .setAutocomplete(true)))
    .addSubcommand(sub => 
      sub.setName('advance')
      .setDescription('Mark current stage as done and advance to next stage')
      .addStringOption(o => 
        o.setName('id')
        .setDescription('Task ID (e.g., "t12345")')
        .setRequired(true)
        .setAutocomplete(true))
      .addStringOption(o => 
        o.setName('notes')
        .setDescription('Completion notes for this stage')
        .setRequired(false))
      .addBooleanOption(o => 
        o.setName('enhancewithai')
        .setDescription('Enhance completion notes with AI')
        .setRequired(false)))
    .addSubcommand(sub => 
      sub.setName('assign')
      .setDescription('Assign the current stage to a user')
      .addStringOption(o => 
        o.setName('id')
        .setDescription('Task ID (e.g., "t12345")')
        .setRequired(true)
        .setAutocomplete(true))
      .addUserOption(u => 
        u.setName('user')
        .setDescription('Discord user to assign')
        .setRequired(true)))
    .addSubcommand(sub => 
      sub.setName('stats')
      .setDescription('Show overall statistics for all tasks'))
    .addSubcommand(sub => 
      sub.setName('help')
      .setDescription('Show help information about using task commands')),
        
  // Handle autocomplete interactions
  async autocomplete(interaction) {
    const subcommand = interaction.options.getSubcommand();
    const focusedOption = interaction.options.getFocused(true);
    
    if (focusedOption.name === 'id') {
      // Get the partial input typed by the user
      const partialId = focusedOption.value.toLowerCase();
      
      // Get tasks from the database based on the partial ID
      let choices = [];
      
      try {
        // Query tasks based on partial ID match
        const tasks = db.prepare(
          `SELECT id, name FROM tasks WHERE id LIKE ? OR name LIKE ? LIMIT 25`
        ).all(`%${partialId}%`, `%${partialId}%`);
        
        choices = tasks.map(task => ({
          name: `${task.id}: ${task.name}`.substring(0, 100),
          value: task.id
        }));
        
        // If we have very few or no matches from DB, add AI suggestions
        if (choices.length < 3 && partialId.length > 0) {
          try {
            const suggestions = await getSuggestions(partialId, 'task name');
            const suggestionChoices = suggestions.map(s => ({
              name: `${s.value} (suggestion)`,
              value: `t${Date.now()}_${s.value.substring(0, 10).replace(/\s+/g, '_').toLowerCase()}`
            }));
            choices = [...choices, ...suggestionChoices].slice(0, 25);
          } catch (error) {
            console.error('Error getting AI suggestions:', error);
            // Continue without AI suggestions
          }
        }
      } catch (err) {
        console.error('Error in autocomplete:', err);
        // Return empty choices on error
      }
      
      return interaction.respond(choices);
    }
  },
  
  async execute(interaction) {
    const subcommand = interaction.options.getSubcommand();
    
    switch (subcommand) {
      case 'create': {
        try {
          // Get all the user options
          const name = interaction.options.getString('name');
          const customId = interaction.options.getString('id');
          const contents = interaction.options.getString('contents') || '';
          const deadline = interaction.options.getString('deadline') || '';
          const useAI = interaction.options.getBoolean('aihelp') || false;
          
          // Generate task ID (custom or timestamp-based)
          const id = customId || `t${Date.now()}`.substring(0, 8);
          
          // Check if ID already exists
          const existingTask = db.prepare('SELECT id FROM tasks WHERE id = ?').get(id);
          if (existingTask) {
            return interaction.reply({ 
              content: `❌ A task with ID \`${id}\` already exists. Please choose a different ID.`, 
              ephemeral: true 
            });
          }
          
          // Process contents with AI if needed
          let enhancedContents = contents;
          if (useAI && contents) {
            await interaction.deferReply();
            try {
              enhancedContents = await enhanceTaskDescription(name, contents);
            } catch (error) {
              logger.error('Error enhancing task description:', error);
              // Continue with original contents if AI enhancement fails
            }
          }
          
          // Insert task into database
          db.prepare('INSERT INTO tasks(id, name, description, deadline, created_at, guild_id, creator_id) VALUES(?, ?, ?, ?, ?, ?, ?)')
            .run(id, name, enhancedContents, deadline, Date.now(), interaction.guildId, interaction.user.id);
          
          // If AI help is requested, generate stage suggestions
          if (useAI) {
            try {
              // Generate stage suggestions using AI
              const suggestedStages = await generateTaskStages(name, enhancedContents || name, deadline);
              
              // Store suggestions in database
              const suggestionResult = db.prepare(
                'INSERT INTO task_suggestions(task_id, stage_suggestions, created_at) VALUES(?, ?, ?)'
              ).run(id, JSON.stringify(suggestedStages), Date.now());
              
              const suggestionId = suggestionResult.lastInsertRowid;
              
              // Create embed to display suggestions
              const suggestionsEmbed = new EmbedBuilder()
                .setTitle(`AI-Suggested Stages for Task: ${name}`)
                .setDescription(`Here are some suggested stages for your task. You can accept them as-is, modify them, or skip them and add your own stages later.`)
                .setColor(0x4caf50)
                .setFooter({ text: `Task ID: ${id}` });
              
              // Add each suggested stage to the embed
              suggestedStages.forEach((stage, index) => {
                suggestionsEmbed.addFields({ 
                  name: `Stage ${index + 1}: ${stage.name}`, 
                  value: stage.description || 'No description provided'
                });
              });
              
              // Send response with buttons for user interaction
              return interaction.editReply({
                content: `📋 Created task \`${id}\`: **${name}**`,
                embeds: [suggestionsEmbed],
                components: [stageSuggestionsActionRow(id, suggestionId)]
              });
              
            } catch (error) {
              logger.error('Error generating AI stage suggestions:', error);
              
              // Fall back to standard response if AI fails
              if (!interaction.replied && !interaction.deferred) {
                return interaction.reply(`📋 Created task \`${id}\`: **${name}**\nAdd stages with \`/task add-stage\``);
              } else {
                return interaction.editReply(`📋 Created task \`${id}\`: **${name}**\nAdd stages with \`/task add-stage\``);
              }
            }
          } else {
            // Standard response without AI
            if (!interaction.replied && !interaction.deferred) {
              return interaction.reply(`📋 Created task \`${id}\`: **${name}**\nAdd stages with \`/task add-stage\``);
            } else {
              return interaction.editReply(`📋 Created task \`${id}\`: **${name}**\nAdd stages with \`/task add-stage\``);
            }
          }
        } catch (error) {
          logger.error('Error creating task:', error);
          return interaction.reply({ 
            content: `An error occurred while creating the task: ${error.message}`, 
            ephemeral: true 
          });
        }
      }
      case 'add-stage': {
        const id = interaction.options.getString('id');
        const name = interaction.options.getString('name');
        const desc = interaction.options.getString('desc');
        const idx = db.prepare('SELECT COUNT(*) as c FROM stages WHERE task_id=?').get(id).c;
        db.prepare('INSERT INTO stages(task_id,idx,name,desc,created_at) VALUES(?,?,?,?,?)').run(id, idx, name, desc, Date.now());
        return interaction.reply(`➕ Stage **${name}** added to task \`${id}\``);
      }
      case 'list': {
        try {
          const id = interaction.options.getString('id');
          
          // Get task details
          const task = db.prepare('SELECT * FROM tasks WHERE id = ?').get(id);
          if (!task) {
            return interaction.reply({ content: `Task \`${id}\` not found.`, ephemeral: true });
          }
          
          // Get stages for this task
          const stages = db.prepare('SELECT * FROM stages WHERE task_id = ? ORDER BY idx').all(id);
          
          // Calculate completion percentage
          const totalStages = stages.length;
          const completedStages = stages.filter(s => s.done === 1).length;
          const completionPercentage = totalStages > 0 ? Math.round((completedStages / totalStages) * 100) : 0;
          
          // Update task completion percentage in database
          db.prepare('UPDATE tasks SET completion_percentage = ? WHERE id = ?').run(completionPercentage, id);
          
          // Format deadline
          const deadlineDisplay = task.deadline ? 
            `Deadline: ${task.deadline}` : 
            'No deadline set';
          
          // Create embed
          const embed = new EmbedBuilder()
            .setTitle(`Task: "${task.name}" [${completionPercentage}%]`)
            .setDescription(task.description ? task.description : 'No description provided')
            .setColor(0x3498db)
            .setFooter({ text: `Task ID: ${id} | Created: ${new Date(task.created_at).toLocaleDateString()}` })
            .addFields({ name: deadlineDisplay, value: '\u200B' });
          
          // No stages message
          if (!stages.length) {
            embed.addFields({ name: 'No stages defined', value: 'Add stages with `/task add-stage`' });
            return interaction.reply({ embeds: [embed], components: [stageActionRow(id)] });
          }
          
          // Add stages to embed
          stages.forEach(stage => {
            let statusValue = '';
            
            if (stage.done === 1) {
              const completedDate = stage.completed_at ? 
                new Date(stage.completed_at).toLocaleDateString() : 
                'Date not recorded';
              
              statusValue = `✅ Done [${completedDate}]`;
              
              // Add completion notes if available
              if (stage.completion_notes) {
                statusValue += `\n${stage.completion_notes}`;
              }
            } else if (stage.assignee) {
              statusValue = `👤 Assigned to <@${stage.assignee}>`;
            } else {
              statusValue = '⏳ Pending';
            }
            
            embed.addFields({ 
              name: `${stage.idx + 1}. ${stage.name}`, 
              value: statusValue 
            });
          });
          
          // Add a progress bar
          const progressBar = this.createProgressBar(completionPercentage);
          embed.addFields({ name: 'Progress', value: progressBar });
          
          // Create appropriate action row based on completion status
          const components = [stageActionRow(id)];
          
          // Add advance stage button if task is not complete
          if (completionPercentage < 100) {
            const currentStage = stages.find(s => s.done === 0);
            if (currentStage) {
              components.push(advanceStageActionRow(id, currentStage.idx));
            }
          }
          
          return interaction.reply({ embeds: [embed], components });
        } catch (error) {
          logger.error('Error listing task:', error);
          return interaction.reply({ 
            content: `An error occurred while listing the task: ${error.message}`, 
            ephemeral: true 
          });
        }
      }
      case 'advance': {
        try {
          const id = interaction.options.getString('id');
          const notes = interaction.options.getString('notes');
          const enhanceWithAi = interaction.options.getBoolean('enhancewithai') || false;
          
          // Get the current stage (first incomplete stage)
          const currentStage = db.prepare('SELECT * FROM stages WHERE task_id = ? AND done = 0 ORDER BY idx').get(id);
          if (!currentStage) {
            return interaction.reply('All stages done 🎉');
          }
          
          // If notes were provided and AI enhancement requested, process notes
          let processedNotes = notes;
          if (notes && enhanceWithAi) {
            await interaction.deferReply();
            try {
              processedNotes = await enhanceTaskNote(notes, currentStage.name);
            } catch (error) {
              logger.error('Error enhancing task notes:', error);
              // Continue with original notes if AI enhancement fails
            }
          }
          
          // Mark the current stage as complete
          db.prepare(
            'UPDATE stages SET done = 1, completed_at = ?, completion_notes = ? WHERE task_id = ? AND idx = ?'
          ).run(Date.now(), processedNotes, id, currentStage.idx);
          
          // Calculate new completion percentage
          const totalStages = db.prepare('SELECT COUNT(*) as count FROM stages WHERE task_id = ?').get(id).count;
          const completedStages = db.prepare('SELECT COUNT(*) as count FROM stages WHERE task_id = ? AND done = 1').get(id).count;
          const completionPercentage = Math.round((completedStages / totalStages) * 100);
          
          // Update task completion percentage
          db.prepare('UPDATE tasks SET completion_percentage = ? WHERE id = ?').run(completionPercentage, id);
          
          // Get the next stage (if any)
          const nextStage = db.prepare('SELECT * FROM stages WHERE task_id = ? AND done = 0 ORDER BY idx').get(id);
          
          // Create response embed
          const embed = new EmbedBuilder()
            .setTitle(`Task Progress Update: [${completionPercentage}%]`)
            .setColor(0x4caf50)
            .addFields({ 
              name: `✅ Completed: ${currentStage.name}`, 
              value: processedNotes || 'No completion notes provided'
            })
            .setFooter({ text: `Task ID: ${id}` });
          
          // Add progress bar
          const progressBar = this.createProgressBar(completionPercentage);
          embed.addFields({ name: 'Progress', value: progressBar });
          
          if (nextStage) {
            // Get prerequisites for the next stage
            const prereq = await getPrereqs(`Task ${id}`, nextStage.name, nextStage.desc);
            
            embed.addFields({ 
              name: `⏭️ Next Stage: ${nextStage.name}`, 
              value: nextStage.desc || 'No description provided'
            });
            
            embed.addFields({ 
              name: '📋 Prerequisites', 
              value: prereq
            });
            
            if (!interaction.replied && !interaction.deferred) {
              return interaction.reply({ 
                embeds: [embed],
                components: [advanceStageActionRow(id, nextStage.idx)]
              });
            } else {
              return interaction.editReply({ 
                embeds: [embed],
                components: [advanceStageActionRow(id, nextStage.idx)]
              });
            }
          } else {
            // All stages completed
            embed.setDescription('🎉 All stages completed!');
            
            if (!interaction.replied && !interaction.deferred) {
              return interaction.reply({ embeds: [embed] });
            } else {
              return interaction.editReply({ embeds: [embed] });
            }
          }
        } catch (error) {
          logger.error('Error advancing stage:', error);
          return interaction.reply({ 
            content: `An error occurred while advancing the stage: ${error.message}`, 
            ephemeral: true 
          });
        }
      }
      case 'assign': {
        const id = interaction.options.getString('id');
        const user = interaction.options.getUser('user');
        const row = db.prepare('SELECT * FROM stages WHERE task_id=? AND done=0 ORDER BY idx').get(id);
        if (!row) return interaction.reply('No active stage.');
        db.prepare('UPDATE stages SET assignee=? WHERE task_id=? AND idx=?').run(user.id, id, row.idx);
        await user.send(`You've been assigned to stage **${row.name}** of Task \`${id}\`.`);
        return interaction.reply(`👤 Assigned <@${user.id}> to **${row.name}**`);
      }
      case 'stats': {
        try {
          // Get overall statistics
          const totalTasks = db.prepare('SELECT COUNT(*) as count FROM tasks').get().count;
          const totalStages = db.prepare('SELECT COUNT(*) as count FROM stages').get().count;
          const completedStages = db.prepare('SELECT COUNT(*) as count FROM stages WHERE done = 1').get().count;
          const completionPercentage = totalStages > 0 ? Math.round((completedStages / totalStages) * 100) : 0;
          
          // Get tasks with upcoming deadlines
          const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format
          const upcomingDeadlines = db.prepare(
            `SELECT id, name, deadline, completion_percentage FROM tasks 
             WHERE deadline >= ? AND completion_percentage < 100 
             ORDER BY deadline ASC LIMIT 5`
          ).all(today);
          
          // Create stats embed
          const statsEmbed = new EmbedBuilder()
            .setTitle('📊 Task Management Statistics')
            .setColor(0x3498db)
            .addFields(
              { name: 'Overview', value: `${totalTasks} tasks with ${totalStages} total stages` },
              { name: 'Progress', value: `${completedStages}/${totalStages} stages completed (${completionPercentage}%)` },
              { name: 'Progress Bar', value: this.createProgressBar(completionPercentage) }
            );
          
          // Add upcoming deadlines if any
          if (upcomingDeadlines.length > 0) {
            const deadlinesText = upcomingDeadlines.map(task => 
              `• \`${task.id}\` **${task.name}** (${task.completion_percentage}%) - Due: ${task.deadline}`
            ).join('\n');
            
            statsEmbed.addFields({ name: '📅 Upcoming Deadlines', value: deadlinesText });
          }
          
          return interaction.reply({ embeds: [statsEmbed] });
        } catch (error) {
          logger.error('Error generating stats:', error);
          return interaction.reply({ 
            content: `An error occurred while generating stats: ${error.message}`, 
            ephemeral: true 
          });
        }
      }
      case 'help': {
        const helpEmbed = new EmbedBuilder()
          .setTitle('🔍 Task Bot Help')
          .setDescription('Guide for using AI-enhanced task management commands')
          .setColor(0x4caf50)
          .addFields(
            { name: '📝 Creating a Task', value: '`/task create name:"Your Task Name" contents:"Description" deadline:"YYYY-MM-DD" aihelp:True`\nCreates a new task with optional AI-suggested stages.' },
            { name: '➕ Adding Stages', value: '`/task add-stage id:"taskID" name:"Stage Name" desc:"Stage description"`\nAdds a stage to an existing task. Stages are completed in order.' },
            { name: '📋 Listing Stages', value: '`/task list id:"taskID"`\nShows all stages for a specific task with their status, progress, and deadline information.' },
            { name: '⏭️ Advancing Stages', value: '`/task advance id:"taskID" notes:"Completion notes" enhancewithai:True`\nMarks the current stage as complete with optional AI-enhanced notes and advances to the next stage.' },
            { name: '👤 Assigning Stages', value: '`/task assign id:"taskID" user:@username`\nAssigns the current active stage to a Discord user.' },
            { name: '📊 Statistics', value: '`/task stats`\nShows overall completion statistics and upcoming deadlines across all tasks.' },
            { name: '💡 AI Features', value: 'Use the `aihelp` option when creating tasks to get AI-suggested stages.\nUse the `enhancewithai` option when advancing stages to improve your completion notes.\nAI will automatically provide prerequisite info for upcoming stages.' },
            { name: '💡 Tips', value: 'You can type part of a task ID in any command and the bot will suggest matching tasks.\nUse buttons under task lists to quickly advance or view details.' }
          )
          .setFooter({ text: 'Task Bot • Type / to see all available commands' });
          
        return interaction.reply({ embeds: [helpEmbed] });
      }
    }
  },

  /**
   * Creates a visual progress bar
   * @param {number} percentage - Progress percentage (0-100)
   * @returns {string} - Text-based progress bar
   */
  createProgressBar(percentage) {
    const filledChar = '■';
    const emptyChar = '□';
    const barLength = 20;
    const filledLength = Math.round((percentage / 100) * barLength);
    const emptyLength = barLength - filledLength;
    
    const filled = filledChar.repeat(filledLength);
    const empty = emptyChar.repeat(emptyLength);
    
    return `${filled}${empty} ${percentage}%`;
  }
}
